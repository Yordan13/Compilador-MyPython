/* The following code was generated by JFlex 1.6.1 */
package Scanner_Jflex;
import java.util.ArrayList;
import scanner.BooleanToken;
import scanner.EOFToken;
import scanner.ErrorToken;
import scanner.FloatToken;
import scanner.IdentifierToken;
import scanner.IntegerToken;
import scanner.NullToken;
import scanner.OperatorToken;
import scanner.ReservedWordToken;
import scanner.StringToken;
import scanner.Token;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>../Scanner/src/Scanner_Jflex/Rules.flex</tt>
 */
public class MyPythonScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  private StringBuffer string =new StringBuffer();
  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\0\1\2\1\106\1\107\1\1\16\7\4\0\1\3\1\64"+
    "\1\4\1\5\1\6\1\62\1\0\1\23\1\52\1\53\1\60\1\57"+
    "\1\56\1\21\1\17\1\61\1\10\1\101\1\100\1\14\1\102\1\15"+
    "\1\105\1\103\1\104\1\11\2\0\1\65\1\63\1\66\2\0\1\67"+
    "\2\13\1\71\1\20\1\16\7\6\1\70\1\72\2\6\1\73\1\6"+
    "\1\74\3\6\1\12\2\6\1\54\1\22\1\55\1\76\1\6\1\0"+
    "\1\24\1\33\1\35\1\26\1\30\1\42\1\47\1\51\1\40\1\6"+
    "\1\34\1\36\1\46\1\25\1\37\1\44\1\6\1\31\1\27\1\32"+
    "\1\41\1\6\1\50\1\43\1\45\1\6\1\0\1\75\1\0\1\77"+
    "\6\7\1\110\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0"+
    "\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6"+
    "\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6"+
    "\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6"+
    "\5\0\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6"+
    "\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"+
    "\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6"+
    "\1\0\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0"+
    "\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7"+
    "\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0"+
    "\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6"+
    "\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6"+
    "\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0"+
    "\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"+
    "\103\6\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0"+
    "\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7"+
    "\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0"+
    "\21\7\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6"+
    "\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0"+
    "\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7"+
    "\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0"+
    "\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6"+
    "\1\7\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\106"+
    "\1\106\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7"+
    "\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7"+
    "\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6"+
    "\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0"+
    "\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0"+
    "\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7"+
    "\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6"+
    "\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0"+
    "\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6"+
    "\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7"+
    "\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0"+
    "\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6"+
    "\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0"+
    "\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6"+
    "\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0"+
    "\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0"+
    "\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0"+
    "\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0"+
    "\61\6\57\0\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0"+
    "\10\6\1\0\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0"+
    "\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0"+
    "\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7"+
    "\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0"+
    "\3\7\4\0\1\7\40\0\35\6\203\0\66\6\12\0\26\6\12\0"+
    "\23\6\215\0\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7\20\0"+
    "\3\7\55\6\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0"+
    "\3\7\44\6\16\7\1\0\12\7\100\0\3\7\60\6\16\7\4\6"+
    "\13\0\12\7\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6\221\0"+
    "\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\7"+
    "\20\0\4\7\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7\2\0"+
    "\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0"+
    "\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0"+
    "\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0"+
    "\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0"+
    "\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6\1\0"+
    "\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0"+
    "\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0"+
    "\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0"+
    "\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\2\1\4\2\5\1\6"+
    "\1\7\1\3\17\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\1\1\22\1\23"+
    "\3\4\1\24\1\25\1\26\1\27\1\1\1\30\1\1"+
    "\1\0\1\31\2\0\2\31\1\32\2\0\1\33\1\0"+
    "\16\4\1\34\1\35\1\36\1\37\11\4\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\2\4\1\54\1\55\2\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\0\3\31\3\0"+
    "\1\66\1\4\1\67\1\4\1\70\1\71\7\4\1\72"+
    "\7\4\1\73\5\4\1\74\1\75\1\76\1\77\1\56"+
    "\1\0\2\31\1\0\1\4\1\100\1\101\1\102\1\103"+
    "\3\4\1\104\6\4\1\105\1\4\1\106\3\4\1\0"+
    "\2\31\1\0\2\4\1\107\1\4\1\110\1\111\3\4"+
    "\1\112\1\4\1\113\1\4\1\114\1\0\2\31\1\0"+
    "\1\115\1\116\1\117\1\4\1\120\1\121\1\4\1\122"+
    "\1\2\2\31\1\0\1\4\1\123\1\2\2\31\1\0"+
    "\1\124\2\31\1\0\2\31\1\0\1\31\1\125\5\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\333\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\u0291\0\u02da\0\u0323\0\333\0\u036c\0\u03b5"+
    "\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd"+
    "\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\333\0\333\0\333"+
    "\0\333\0\333\0\u07b3\0\u07fc\0\u0845\0\333\0\u088e\0\u08d7"+
    "\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\333\0\333\0\333"+
    "\0\u0a8d\0\u0ad6\0\333\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43"+
    "\0\u0c8c\0\u0cd5\0\333\0\u0d1e\0\u0d67\0\333\0\u0db0\0\u0df9"+
    "\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041"+
    "\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u01ff\0\u01ff\0\u01ff"+
    "\0\u01ff\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad"+
    "\0\u13f6\0\u143f\0\333\0\u1488\0\333\0\u14d1\0\333\0\333"+
    "\0\333\0\333\0\333\0\333\0\333\0\333\0\u151a\0\u1563"+
    "\0\u01ff\0\333\0\u15ac\0\u15f5\0\333\0\333\0\333\0\333"+
    "\0\333\0\333\0\333\0\u163e\0\u0c43\0\u1687\0\u16d0\0\u1719"+
    "\0\u1762\0\u17ab\0\u01ff\0\u17f4\0\u01ff\0\u183d\0\u01ff\0\u01ff"+
    "\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u01ff"+
    "\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u01ff"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\333\0\333\0\u01ff"+
    "\0\u01ff\0\333\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u01ff"+
    "\0\u01ff\0\u01ff\0\u01ff\0\u1f5e\0\u1fa7\0\u1ff0\0\u01ff\0\u2039"+
    "\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u01ff\0\u21ef\0\u01ff"+
    "\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437"+
    "\0\u2480\0\u01ff\0\u24c9\0\u01ff\0\u01ff\0\u2512\0\u255b\0\u25a4"+
    "\0\u01ff\0\u25ed\0\u01ff\0\u2636\0\u01ff\0\u267f\0\u26c8\0\u2711"+
    "\0\u275a\0\u01ff\0\u01ff\0\u01ff\0\u27a3\0\u01ff\0\u01ff\0\u27ec"+
    "\0\u01ff\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u01ff\0\u29a2"+
    "\0\u29eb\0\u2a34\0\u2a7d\0\u01ff\0\u2ac6\0\u2b0f\0\u2b58\0\333"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\333\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57"+
    "\0\u0bfa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\2\11\2\13\1\11\1\14\1\11\1\15\1\4"+
    "\1\16\1\17\1\20\1\21\1\11\1\22\1\23\1\24"+
    "\1\25\1\11\1\26\1\27\1\30\1\31\1\11\1\32"+
    "\1\11\1\33\2\11\1\34\1\35\1\11\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\11\1\55\2\11"+
    "\1\56\1\57\1\60\6\13\1\4\1\6\1\4\1\61"+
    "\1\62\1\4\1\61\1\63\15\61\1\64\66\61\111\4"+
    "\113\0\1\6\112\0\1\65\104\0\1\10\1\5\1\6"+
    "\106\10\6\0\11\11\1\0\1\11\3\0\26\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\10\0\1\66\1\67"+
    "\1\70\1\0\1\71\1\72\1\73\1\74\1\75\7\0"+
    "\1\75\11\0\1\73\1\70\34\0\2\71\2\72\1\67"+
    "\1\72\13\0\2\13\2\0\2\13\1\73\1\74\1\75"+
    "\7\0\1\75\11\0\1\73\35\0\6\13\13\0\2\74"+
    "\2\0\2\74\62\0\6\74\66\0\1\76\14\0\1\77"+
    "\16\0\11\11\1\0\1\11\3\0\1\11\1\100\1\11"+
    "\1\101\22\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\13\11\1\102\1\11"+
    "\1\103\10\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\4\11\1\104\21\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\12\11\1\105\4\11\1\106\6\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\1\107\3\11\1\110\21\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\5\11\1\111\20\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\6\0\11\11\1\0\1\11\3\0"+
    "\5\11\1\112\20\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\12\11\1\113"+
    "\1\114\12\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\1\115\25\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\5\11\1\116\20\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\6\0\11\11\1\0\1\11\3\0"+
    "\1\11\1\117\1\11\1\120\12\11\1\121\3\11\1\122"+
    "\3\11\15\0\6\11\3\0\6\11\2\0\1\11\6\0"+
    "\11\11\1\0\1\11\3\0\1\123\4\11\1\124\5\11"+
    "\1\125\1\126\11\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\1\127\4\11"+
    "\1\130\20\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\12\11\1\131\13\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\25\11\1\132\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\63\0\1\133\105\0\1\134\2\0"+
    "\1\135\106\0\1\136\1\0\1\137\110\0\1\140\110\0"+
    "\1\141\110\0\1\142\1\0\1\143\1\144\105\0\1\145"+
    "\2\0\1\146\30\0\11\11\1\0\1\11\3\0\26\11"+
    "\15\0\1\11\1\147\4\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\26\11\15\0\3\11"+
    "\1\150\2\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\26\11\15\0\4\11\1\151\1\11"+
    "\3\0\6\11\2\0\1\11\1\61\2\0\1\61\1\0"+
    "\15\61\1\0\66\61\2\0\1\4\106\0\1\4\2\0"+
    "\1\4\1\152\3\4\1\153\3\4\1\153\1\154\4\4"+
    "\1\155\1\156\1\4\1\157\3\4\1\160\1\161\1\162"+
    "\6\4\1\163\35\4\2\153\2\154\1\4\1\154\7\0"+
    "\1\164\114\0\1\66\1\67\2\0\1\71\1\72\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\2\71"+
    "\2\72\1\67\1\72\13\0\2\67\2\0\2\67\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\6\67"+
    "\13\0\1\165\1\166\1\0\4\166\1\0\1\166\3\0"+
    "\1\166\1\0\1\166\1\0\1\166\2\0\1\166\1\0"+
    "\1\166\4\0\1\166\24\0\1\166\1\0\1\166\6\0"+
    "\6\166\13\0\1\72\1\67\2\0\2\72\1\73\1\74"+
    "\1\75\7\0\1\75\11\0\1\73\35\0\4\72\1\67"+
    "\1\72\13\0\1\167\1\67\2\0\2\167\1\73\1\74"+
    "\1\75\7\0\1\75\11\0\1\73\35\0\4\167\1\67"+
    "\1\167\13\0\2\74\2\0\2\74\1\73\1\0\1\75"+
    "\7\0\1\75\11\0\1\73\35\0\6\74\13\0\2\170"+
    "\2\0\2\170\3\0\1\171\35\0\1\171\20\0\6\170"+
    "\104\0\1\172\15\0\11\11\1\0\1\11\3\0\2\11"+
    "\1\173\23\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\3\11\1\174\22\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\6\11\1\175\17\11\15\0\6\11"+
    "\3\0\6\11\2\0\1\11\6\0\11\11\1\0\1\11"+
    "\3\0\12\11\1\176\13\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\12\11"+
    "\1\177\3\11\1\200\7\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\3\11"+
    "\1\201\10\11\1\202\11\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\4\11"+
    "\1\203\4\11\1\204\14\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\14\11"+
    "\1\205\11\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\6\11\1\206\17\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\15\11\1\207\3\11\1\210\4\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\4\11\1\211\21\11\15\0\6\11"+
    "\3\0\6\11\2\0\1\11\6\0\11\11\1\0\1\11"+
    "\3\0\1\212\25\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\1\11\1\213"+
    "\24\11\15\0\6\11\3\0\6\11\2\0\1\11\6\0"+
    "\11\11\1\0\1\11\3\0\22\11\1\214\3\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\20\11\1\215\5\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\6\0\11\11\1\0\1\11\3\0"+
    "\12\11\1\216\13\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\13\11\1\217"+
    "\12\11\15\0\6\11\3\0\6\11\2\0\1\11\6\0"+
    "\11\11\1\0\1\11\3\0\5\11\1\220\20\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\1\11\1\221\24\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\6\0\11\11\1\0\1\11\3\0"+
    "\3\11\1\222\22\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\14\11\1\223"+
    "\11\11\15\0\6\11\3\0\6\11\2\0\1\11\6\0"+
    "\11\11\1\0\1\11\3\0\13\11\1\224\12\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\14\11\1\225\11\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\63\0\1\226\110\0\1\227\33\0"+
    "\11\11\1\0\1\11\3\0\26\11\15\0\2\11\1\230"+
    "\3\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\26\11\15\0\5\11\1\231\3\0\6\11"+
    "\2\0\1\11\10\0\1\154\3\0\2\154\62\0\4\154"+
    "\1\0\1\154\13\0\1\232\3\0\2\232\62\0\4\232"+
    "\1\0\1\232\3\0\4\233\1\0\104\233\10\0\2\234"+
    "\1\0\4\234\1\0\1\234\3\0\1\234\1\0\1\234"+
    "\1\0\1\234\2\0\1\234\1\0\1\234\4\0\1\234"+
    "\24\0\1\234\1\0\1\234\6\0\6\234\13\0\1\235"+
    "\1\67\2\0\2\235\1\73\1\74\1\75\7\0\1\75"+
    "\11\0\1\73\35\0\4\235\1\67\1\235\13\0\2\170"+
    "\2\0\2\170\1\73\23\0\1\73\35\0\6\170\13\0"+
    "\2\170\2\0\2\170\62\0\6\170\105\0\1\236\14\0"+
    "\11\11\1\0\1\11\3\0\4\11\1\237\21\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\12\11\1\240\13\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\6\0\11\11\1\0\1\11\3\0"+
    "\4\11\1\241\21\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\16\11\1\242"+
    "\7\11\15\0\6\11\3\0\6\11\2\0\1\11\6\0"+
    "\11\11\1\0\1\11\3\0\11\11\1\243\14\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\4\11\1\244\21\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\6\0\11\11\1\0\1\11\3\0"+
    "\3\11\1\245\22\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\15\11\1\246"+
    "\10\11\15\0\6\11\3\0\6\11\2\0\1\11\6\0"+
    "\11\11\1\0\1\11\3\0\4\11\1\247\21\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\1\250\25\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\3\11"+
    "\1\251\22\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\6\11\1\252\17\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\7\11\1\253\16\11\15\0\6\11"+
    "\3\0\6\11\2\0\1\11\6\0\11\11\1\0\1\11"+
    "\3\0\13\11\1\254\12\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\3\11"+
    "\1\255\22\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\22\11\1\256\3\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\1\257\25\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\6\0\11\11\1\0\1\11\3\0"+
    "\3\11\1\260\22\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\1\11\1\261"+
    "\24\11\15\0\6\11\3\0\6\11\2\0\1\11\6\0"+
    "\11\11\1\0\1\11\3\0\7\11\1\262\16\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\12\11\1\263\13\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\4\233\1\264\104\233\10\0\2\265"+
    "\1\0\4\265\1\0\1\265\3\0\1\265\1\0\1\265"+
    "\1\0\1\265\2\0\1\265\1\0\1\265\4\0\1\265"+
    "\24\0\1\265\1\0\1\265\6\0\6\265\13\0\1\266"+
    "\1\67\2\0\2\266\1\73\1\74\1\75\7\0\1\75"+
    "\11\0\1\73\35\0\4\266\1\67\1\266\106\0\1\267"+
    "\13\0\11\11\1\0\1\11\3\0\5\11\1\270\20\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\20\11\1\271\5\11\15\0\6\11"+
    "\3\0\6\11\2\0\1\11\6\0\11\11\1\0\1\11"+
    "\3\0\4\11\1\272\21\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\5\11"+
    "\1\273\20\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\10\11\1\274\15\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\3\11\1\275\22\11\15\0\6\11"+
    "\3\0\6\11\2\0\1\11\6\0\11\11\1\0\1\11"+
    "\3\0\14\11\1\276\11\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\2\11"+
    "\1\277\23\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\5\11\1\300\20\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\4\11\1\301\21\11\15\0\6\11"+
    "\3\0\6\11\2\0\1\11\6\0\11\11\1\0\1\11"+
    "\3\0\12\11\1\302\13\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\6\11"+
    "\1\303\17\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\1\304\25\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\4\11\1\305\21\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\4\233\1\306\104\233\10\0\2\307"+
    "\1\0\4\307\1\0\1\307\3\0\1\307\1\0\1\307"+
    "\1\0\1\307\2\0\1\307\1\0\1\307\4\0\1\307"+
    "\24\0\1\307\1\0\1\307\6\0\6\307\13\0\1\310"+
    "\1\67\2\0\2\310\1\73\1\74\1\75\7\0\1\75"+
    "\11\0\1\73\35\0\4\310\1\67\1\310\105\0\1\311"+
    "\14\0\11\11\1\0\1\11\3\0\6\11\1\312\17\11"+
    "\15\0\6\11\3\0\6\11\2\0\1\11\6\0\11\11"+
    "\1\0\1\11\3\0\6\11\1\313\17\11\15\0\6\11"+
    "\3\0\6\11\2\0\1\11\6\0\11\11\1\0\1\11"+
    "\3\0\1\11\1\314\24\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\1\11"+
    "\1\315\24\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\6\0\11\11\1\0\1\11\3\0\1\316\25\11\15\0"+
    "\6\11\3\0\6\11\2\0\1\11\6\0\11\11\1\0"+
    "\1\11\3\0\6\11\1\317\17\11\15\0\6\11\3\0"+
    "\6\11\2\0\1\11\6\0\11\11\1\0\1\11\3\0"+
    "\12\11\1\320\13\11\15\0\6\11\3\0\6\11\2\0"+
    "\1\11\6\0\11\11\1\0\1\11\3\0\12\11\1\321"+
    "\13\11\15\0\6\11\3\0\6\11\2\0\1\11\4\233"+
    "\1\322\104\233\10\0\2\323\1\0\4\323\1\0\1\323"+
    "\3\0\1\323\1\0\1\323\1\0\1\323\2\0\1\323"+
    "\1\0\1\323\4\0\1\323\24\0\1\323\1\0\1\323"+
    "\6\0\6\323\13\0\1\324\1\67\2\0\2\324\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\4\324"+
    "\1\67\1\324\107\0\1\325\12\0\11\11\1\0\1\11"+
    "\3\0\15\11\1\326\10\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\6\0\11\11\1\0\1\11\3\0\21\11"+
    "\1\327\4\11\15\0\6\11\3\0\6\11\2\0\1\11"+
    "\4\0\1\330\114\0\2\331\1\0\4\331\1\0\1\331"+
    "\3\0\1\331\1\0\1\331\1\0\1\331\2\0\1\331"+
    "\1\0\1\331\4\0\1\331\24\0\1\331\1\0\1\331"+
    "\6\0\6\331\13\0\1\332\1\67\2\0\2\332\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\4\332"+
    "\1\67\1\332\17\0\1\333\102\0\11\11\1\0\1\11"+
    "\3\0\4\11\1\334\21\11\15\0\6\11\3\0\6\11"+
    "\2\0\1\11\4\0\1\6\114\0\2\335\1\0\4\335"+
    "\1\0\1\335\3\0\1\335\1\0\1\335\1\0\1\335"+
    "\2\0\1\335\1\0\1\335\4\0\1\335\24\0\1\335"+
    "\1\0\1\335\6\0\6\335\13\0\1\336\1\67\2\0"+
    "\2\336\1\73\1\74\1\75\7\0\1\75\11\0\1\73"+
    "\35\0\4\336\1\67\1\336\110\0\1\337\13\0\2\340"+
    "\1\0\4\340\1\0\1\340\3\0\1\340\1\0\1\340"+
    "\1\0\1\340\2\0\1\340\1\0\1\340\4\0\1\340"+
    "\24\0\1\340\1\0\1\340\6\0\6\340\13\0\1\341"+
    "\1\67\2\0\2\341\1\73\1\74\1\75\7\0\1\75"+
    "\11\0\1\73\35\0\4\341\1\67\1\341\105\0\1\342"+
    "\16\0\1\343\1\67\2\0\2\343\1\73\1\74\1\75"+
    "\7\0\1\75\11\0\1\73\35\0\4\343\1\67\1\343"+
    "\107\0\1\344\14\0\1\345\1\67\2\0\2\345\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\4\345"+
    "\1\67\1\345\13\0\1\346\1\67\2\0\2\346\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\4\346"+
    "\1\67\1\346\13\0\1\347\1\67\2\0\2\347\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\4\347"+
    "\1\67\1\347\13\0\1\350\1\67\2\0\2\350\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\4\350"+
    "\1\67\1\350\13\0\1\351\1\67\2\0\2\351\1\73"+
    "\1\74\1\75\7\0\1\75\11\0\1\73\35\0\4\351"+
    "\1\67\1\351\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\1\11\17\1\5\11"+
    "\3\1\1\11\7\1\3\11\2\1\1\11\1\1\1\0"+
    "\1\1\2\0\2\1\1\11\2\0\1\11\1\0\33\1"+
    "\1\11\1\1\1\11\1\1\10\11\3\1\1\11\2\1"+
    "\7\11\1\0\3\1\3\0\33\1\2\11\2\1\1\11"+
    "\1\0\2\1\1\0\25\1\1\0\2\1\1\0\16\1"+
    "\1\0\2\1\1\0\13\1\1\0\5\1\1\0\3\1"+
    "\1\0\1\11\1\1\1\0\1\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    
  private ArrayList<Token> _TokenList=new ArrayList<>();
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyPythonScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2902) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                _TokenList.add(new EOFToken("EOF",yyline));
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { _TokenList.add(new ErrorToken(yytext(),yyline));
            }
          case 86: break;
          case 2: 
            { /* ignore */
            }
          case 87: break;
          case 3: 
            { yybegin(STRING); string.setLength(0);
            }
          case 88: break;
          case 4: 
            { _TokenList.add(new IdentifierToken(yytext(),yyline));
            }
          case 89: break;
          case 5: 
            { _TokenList.add(new IntegerToken(yytext(),yyline));
            }
          case 90: break;
          case 6: 
            { _TokenList.add(new ReservedWordToken(".",yyline));
            }
          case 91: break;
          case 7: 
            { _TokenList.add(new OperatorToken("-",yyline));
            }
          case 92: break;
          case 8: 
            { _TokenList.add(new ReservedWordToken("(",yyline));
            }
          case 93: break;
          case 9: 
            { _TokenList.add(new ReservedWordToken(")",yyline));
            }
          case 94: break;
          case 10: 
            { _TokenList.add(new ReservedWordToken("[",yyline));
            }
          case 95: break;
          case 11: 
            { _TokenList.add(new ReservedWordToken("]",yyline));
            }
          case 96: break;
          case 12: 
            { _TokenList.add(new ReservedWordToken(",",yyline));
            }
          case 97: break;
          case 13: 
            { _TokenList.add(new OperatorToken("+",yyline));
            }
          case 98: break;
          case 14: 
            { _TokenList.add(new OperatorToken("*",yyline));
            }
          case 99: break;
          case 15: 
            { _TokenList.add(new OperatorToken("/",yyline));
            }
          case 100: break;
          case 16: 
            { _TokenList.add(new OperatorToken("%",yyline));
            }
          case 101: break;
          case 17: 
            { _TokenList.add(new OperatorToken("=",yyline));
            }
          case 102: break;
          case 18: 
            { _TokenList.add(new OperatorToken("<",yyline));
            }
          case 103: break;
          case 19: 
            { _TokenList.add(new OperatorToken(">",yyline));
            }
          case 104: break;
          case 20: 
            { _TokenList.add(new OperatorToken("|",yyline));
            }
          case 105: break;
          case 21: 
            { _TokenList.add(new OperatorToken("^",yyline));
            }
          case 106: break;
          case 22: 
            { _TokenList.add(new OperatorToken("~",yyline));
            }
          case 107: break;
          case 23: 
            { string.append( yytext() );
            }
          case 108: break;
          case 24: 
            { yybegin(YYINITIAL); _TokenList.add(new StringToken(string.toString(),yyline));
            }
          case 109: break;
          case 25: 
            { _TokenList.add(new IntegerToken(String.valueOf(parseLong(2, yylength(), 16)),yyline));
            }
          case 110: break;
          case 26: 
            { _TokenList.add(new FloatToken(yytext().substring(0,yylength()-1),yyline));
            }
          case 111: break;
          case 27: 
            { _TokenList.add(new OperatorToken("-=",yyline));
            }
          case 112: break;
          case 28: 
            { _TokenList.add(new ReservedWordToken("or",yyline));
            }
          case 113: break;
          case 29: 
            { _TokenList.add(new ReservedWordToken("in",yyline));
            }
          case 114: break;
          case 30: 
            { _TokenList.add(new ReservedWordToken("is",yyline));
            }
          case 115: break;
          case 31: 
            { _TokenList.add(new ReservedWordToken("if",yyline));
            }
          case 116: break;
          case 32: 
            { _TokenList.add(new OperatorToken("+=",yyline));
            }
          case 117: break;
          case 33: 
            { _TokenList.add(new OperatorToken("**",yyline));
            }
          case 118: break;
          case 34: 
            { _TokenList.add(new OperatorToken("*=",yyline));
            }
          case 119: break;
          case 35: 
            { _TokenList.add(new OperatorToken("//",yyline));
            }
          case 120: break;
          case 36: 
            { _TokenList.add(new OperatorToken("/=",yyline));
            }
          case 121: break;
          case 37: 
            { _TokenList.add(new OperatorToken("==",yyline));
            }
          case 122: break;
          case 38: 
            { _TokenList.add(new OperatorToken("!=",yyline));
            }
          case 123: break;
          case 39: 
            { _TokenList.add(new OperatorToken("<=",yyline));
            }
          case 124: break;
          case 40: 
            { _TokenList.add(new OperatorToken("<<",yyline));
            }
          case 125: break;
          case 41: 
            { _TokenList.add(new OperatorToken("<>",yyline));
            }
          case 126: break;
          case 42: 
            { _TokenList.add(new OperatorToken(">=",yyline));
            }
          case 127: break;
          case 43: 
            { _TokenList.add(new OperatorToken(">>",yyline));
            }
          case 128: break;
          case 44: 
            { _TokenList.add(new OperatorToken("OR",yyline));
            }
          case 129: break;
          case 45: 
            { string.append( '\"' );
            }
          case 130: break;
          case 46: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 131: break;
          case 47: 
            { string.append( '\\' );
            }
          case 132: break;
          case 48: 
            { string.append( '\'' );
            }
          case 133: break;
          case 49: 
            { string.append( '\n' );
            }
          case 134: break;
          case 50: 
            { string.append( '\r' );
            }
          case 135: break;
          case 51: 
            { string.append( '\t' );
            }
          case 136: break;
          case 52: 
            { string.append( '\b' );
            }
          case 137: break;
          case 53: 
            { string.append( '\f' );
            }
          case 138: break;
          case 54: 
            { _TokenList.add(new ReservedWordToken("and",yyline));
            }
          case 139: break;
          case 55: 
            { _TokenList.add(new ReservedWordToken("not",yyline));
            }
          case 140: break;
          case 56: 
            { _TokenList.add(new ReservedWordToken("del",yyline));
            }
          case 141: break;
          case 57: 
            { _TokenList.add(new ReservedWordToken("def",yyline));
            }
          case 142: break;
          case 58: 
            { _TokenList.add(new ReservedWordToken("try",yyline));
            }
          case 143: break;
          case 59: 
            { _TokenList.add(new ReservedWordToken("for",yyline));
            }
          case 144: break;
          case 60: 
            { _TokenList.add(new OperatorToken("**=",yyline));
            }
          case 145: break;
          case 61: 
            { _TokenList.add(new OperatorToken("//=",yyline));
            }
          case 146: break;
          case 62: 
            { _TokenList.add(new OperatorToken("AND",yyline));
            }
          case 147: break;
          case 63: 
            { _TokenList.add(new OperatorToken("NOT",yyline));
            }
          case 148: break;
          case 64: 
            { _TokenList.add(new NullToken("null",yyline));
            }
          case 149: break;
          case 65: 
            { _TokenList.add(new ReservedWordToken("else",yyline));
            }
          case 150: break;
          case 66: 
            { _TokenList.add(new ReservedWordToken("elif",yyline));
            }
          case 151: break;
          case 67: 
            { _TokenList.add(new ReservedWordToken("exec",yyline));
            }
          case 152: break;
          case 68: 
            { _TokenList.add(new BooleanToken("true",yyline));
            }
          case 153: break;
          case 69: 
            { _TokenList.add(new ReservedWordToken("from",yyline));
            }
          case 154: break;
          case 70: 
            { _TokenList.add(new ReservedWordToken("pass",yyline));
            }
          case 155: break;
          case 71: 
            { _TokenList.add(new ReservedWordToken("raise",yyline));
            }
          case 156: break;
          case 72: 
            { _TokenList.add(new ReservedWordToken("break",yyline));
            }
          case 157: break;
          case 73: 
            { _TokenList.add(new ReservedWordToken("class",yyline));
            }
          case 158: break;
          case 74: 
            { _TokenList.add(new BooleanToken("false",yyline));
            }
          case 159: break;
          case 75: 
            { _TokenList.add(new ReservedWordToken("print",yyline));
            }
          case 160: break;
          case 76: 
            { _TokenList.add(new ReservedWordToken("while",yyline));
            }
          case 161: break;
          case 77: 
            { _TokenList.add(new ReservedWordToken("assert",yyline));
            }
          case 162: break;
          case 78: 
            { _TokenList.add(new ReservedWordToken("except",yyline));
            }
          case 163: break;
          case 79: 
            { _TokenList.add(new ReservedWordToken("return",yyline));
            }
          case 164: break;
          case 80: 
            { _TokenList.add(new ReservedWordToken("lambda",yyline));
            }
          case 165: break;
          case 81: 
            { _TokenList.add(new ReservedWordToken("import",yyline));
            }
          case 166: break;
          case 82: 
            { _TokenList.add(new ReservedWordToken("global",yyline));
            }
          case 167: break;
          case 83: 
            { _TokenList.add(new ReservedWordToken("finally",yyline));
            }
          case 168: break;
          case 84: 
            { _TokenList.add(new ReservedWordToken("continue",yyline));
            }
          case 169: break;
          case 85: 
            { _TokenList.add(new IntegerToken("-2147483648",yyline));
            }
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
